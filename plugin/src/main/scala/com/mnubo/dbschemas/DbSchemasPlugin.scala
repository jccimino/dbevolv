package com.mnubo.dbschemas

import com.typesafe.config.ConfigFactory
import com.typesafe.sbt.packager.NativePackagerKeys
import com.typesafe.sbt.packager.docker.DockerPlugin
import com.typesafe.sbt.packager.docker.DockerPlugin.autoImport._
import com.typesafe.sbt.packager.linux.LinuxPlugin.autoImport._
import sbt.Keys._
import sbt._
import sbtassembly.AssemblyPlugin
import sbtassembly.AssemblyPlugin.autoImport._
import sbtrelease.ReleasePlugin.ReleaseKeys._
import sbtrelease.ReleasePlugin._
import sbtrelease.ReleaseStateTransformations._
import sbtrelease._

import scala.io.Source

object DbSchemasPlugin extends AutoPlugin with NativePackagerKeys {
  private val config = ConfigFactory.parseFile(new File("db.conf"))
  private val schemaName = config.getString("schema_name")
  private val schemaManagerJarName = s"$schemaName-schema-manager.jar"
  private val dbschemasVersion = Source.fromInputStream(getClass.getResourceAsStream("/version.txt")).getLines().mkString

  override def requires = DockerPlugin && AssemblyPlugin

  override lazy val projectSettings: Seq[Setting[_]] = releaseSettings ++ Seq(
    // Avoid the user to give a name to the SBT project: use the schema name defined in the config.
    name                                  := schemaName,
    // Specify what is the main class to run in the fat jar
    mainClass in assembly                 := Some("com.mnubo.dbschemas.DbSchemas"),
    // We just need the dbschemas library to build a schema. We automatically infer the version to use.
    libraryDependencies                   += "com.mnubo" %% "dbschemas" % dbschemasVersion,
    // Give the fat jar a simple name
    assemblyJarName                       := schemaManagerJarName,
    // This is mandatory, apparently
    maintainer in Docker                  := "Mnubo",
    // User the space friendlier centOS distrib (compared to default Ubuntu), the less buggy Oracle JRE (compared to OpenJDK), and clean stuff properly. Bottom line: 400MB instead of 815MB.
    dockerBaseImage                       := "domblack/oracle-jre8",
    // I don't like having a complicated app hierarchy. Just put everything in /app
    defaultLinuxInstallLocation in Docker := "/app",
    // Since we have a fat jar, this simple command is all what's needed
    dockerEntrypoint                      := Seq("java", "-jar", s"/app/$schemaManagerJarName"),
    dockerRepository                      := Some("dockerep-0.mtl.mnubo.com"),
    // Overrides all the default mappings, so it is cleaner and leaner.
    // Documenation of these arcane methods: http://www.scala-sbt.org/sbt-native-packager/formats/universal.html#settings
    mappings in Docker                    := Seq(
      (assembly in assembly).value -> s"/app/$schemaManagerJarName",                                                                 // The fat jar
      file("db.conf") -> "/app/db.conf"                                                                                              // The conf file
    ),
    mappings in Docker                    ++= file("migrations").*** pair rebase(baseDirectory.value, "/app"),                       // The migration files
    mappings in Docker                    ++= Seq((dockerGenerateConfig in Docker).value) pair relativeTo((target in Docker).value),  // The Docker file generated by DockerPlugin
    // Auto increment the version every time we run the build in Jenkins by using the sbt-release plugin.
    publishArtifactsAction                := (publish in Docker).value,
    releaseVersion                        := identity, // The current version is already the good one
    nextVersion                           := { (ver: String) => sbtrelease.Version(ver).map(_.bumpBugfix.string).getOrElse(versionFormatError) }, // Don't 'snapshot' the version
    // Don't need to commit the release version, since it is already the good one.
    releaseProcess                        := Seq[ReleaseStep](
      checkSnapshotDependencies,
      inquireVersions,
      runTest,
      setReleaseVersion,
      tagRelease,
      publishArtifacts,
      setNextVersion,
      commitNextVersion,
      pushChanges
    )
  )
}
